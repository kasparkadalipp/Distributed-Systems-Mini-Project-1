syntax = "proto3";

import "google/protobuf/timestamp.proto";

package project;

enum Status {
  STATUS_UNSPECIFIED = 0;
  SUCCESS = 1;
  FAILURE = 2;
}

enum Marker {
  MARKER_UNSPECIFIED = 0;
  O = 1;
  X = 2;
}

enum Result {
  RESULT_UNSPECIFIED = 0;
  DRAW = 1;
  WIN = 2;
  LOSS = 3;
}

service GameService {
  // ================== TIME SYNCHRONISATION ======================
  // Used by leader to query nodes for their time
  rpc GetTime(TimeRequest) returns (TimeResponse) {}
  // Used by leader to inform nodes about required clock adjustments
  rpc AdjustClock(AdjustClockRequest) returns (AdjustClockResponse) {}
  // Used by leader for manual clock adjustments
  rpc SetClock(SetClockRequest) returns (SetClockResponse) {}

  // ================== LEADER ELECTION ======================
  // the function will handle the election process
  rpc AssumeLeader (LeaderRequest) returns (LeaderResponse);
  // new leader is ready to take over
  rpc NotifyOfNewLeader (NewLeader) returns (Acknowledged);
  // Simple echo message which can be used to determine if the current leader is alive
  rpc Echo(Ping) returns (Pong);

  // ================== GAME LOGIC ======================
  // Some ideas about the missing/remaining stuff:
  // - Master should, upon start of game, assign symbol (O/X) to slave nodes
  // - Master needs to inform slaves once it is their turn (board state should be included, including for what player the turn needs to be made for)
  rpc JoinGame (JoinGameRequest) returns (JoinGameResponse);
  rpc ListBoard (ListBoardRequest) returns (ListBoardResponse);
  rpc PlayerTurn (RequestTurn) returns (Acknowledged);
  rpc PlaceMarker (PlaceMarkerRequest) returns (PlaceMarkerResponse); // place X or O
  rpc DeclareWinner (AnnounceWinner) returns (Acknowledged);
}

// ================== TIME SYNCHRONISATION ======================
message TimeRequest {}

message TimeResponse {
  google.protobuf.Timestamp time = 1;
}

message AdjustClockRequest {
  // offset in milliseconds to be added to current clock:
  // - positive value indicating amount of milliseconds to be added (in case node time lags behind current time)
  // - negative value indicating amount of milliseconds to be subtracted (in case node time leads in front of current time)
  int64 offset_ms = 1;
}

message AdjustClockResponse {
  // request will result in failure in case issued by non-leader node
  Status status = 1;
  string message = 2;
}

message SetClockRequest {
  google.protobuf.Timestamp time = 1;
}

message SetClockResponse {
  // request will result in failure in case issued by non-leader node
  Status status = 1;
  string message = 2;
}

// ================== LEADER ELECTION ======================
message LeaderRequest {
  // request to become new leader
  uint32 node_id = 1;
}

message LeaderResponse {
  bool acknowledged = 1;
}

message NewLeader {
  uint32 leader_id = 1;
}

message Acknowledged{}
message Ping{}
message Pong{}

// ================== GAME LOGIC ======================
message AnnounceWinner {
  string board_state = 1;
  bool is_winner = 2;
}

message PlaceMarkerResponse {
  // request will result in failure in case issued by non-leader node
  Status status = 1;
  string message = 2;
}

message RequestTurn {
  string board_state = 1;
  Marker marker = 2;
}

message PlaceMarkerRequest {
  int32 player_id = 1;
  int32 board_position = 2;
}


message JoinGameRequest {
  int32 player_id = 1;
}

message JoinGameResponse {
  bool game_started = 1;
}

message ListBoardRequest {
}

message ListBoardResponse {
  // request will result in failure in case issued to non-leader node
  Status status = 1;
  string message = 2;

  // maps field identifier (number between 0 and 8) to player that occupies field (if any)
  map<uint32, Marker> board = 3;
}